name: Rust CI
on:
  push:
    branches: [devel]
jobs:
  build-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Set up MSVC (Windows only)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release --verbose
      - name: Build (Non-Windows)
        if: runner.os != 'Windows'
        run: cargo build --verbose
      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        run: cargo test --release --verbose
      - name: Run Tests (Non-Windows)
        if: runner.os != 'Windows'
        run: cargo test --verbose

  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install OpenSSL dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter -m cli/Cargo.toml
          sccache: "true"
          manylinux: auto
          before-script-linux: |

            if command -v yum &> /dev/null; then
              yum install -y openssl-devel
            elif command -v apt-get &> /dev/null; then
              apt-get update
              apt-get install -y libssl-dev pkg-config
            else
              echo "Neither yum nor apt-get found. Trying to proceed without installing packages."
            fi

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter -m cli/Cargo.toml
          sccache: "true"

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-14
            target: aarch64

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter -m cli/Cargo.toml
          sccache: "true"
